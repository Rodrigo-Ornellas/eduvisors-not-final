{"version":3,"sources":["../server/server.js"],"names":["app","PORT","process","env","sqlite3","require","verbose","db","Database","listen","console","log","use","bodyParser","json","urlencoded","extended","get","req","res","all","err","rows","next","header","locals","data","user","id","email","schoolMatchingAlgo","total_score","multiplier_at","multiplier_rain","multiplier_snow","o_w","o_emp","o_tui","o_col","o_rank","obj","i","length","schoolID","institutionName","name","province","r_at","parseFloat","r_snow","r_rain","c_weather","score","Math","pow","c_emp","c_tui","c_col","c_rank","newObj","actualScore","calculatedScore","abs","toFixed","push","sort","a","b","obj2","scoreCalculator","c_at","c_rain","c_snow","o_at","o_rain","o_snow","weather_score","weather_score2","arr2","schoolNames","test","Promise","resolve","reject","each","row","post","body","arr","then","params","toUpperCase","conta","type","toLowerCase","at","snow","rain","run","tui","col","rank","emp","weather","datasets","label","j","value"],"mappings":"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","file":"server.js","sourcesContent":["import compression from 'compression';\nimport express from 'express';\nimport http from 'http';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport path from 'path';\nimport api from './api';\nimport { addNotifier, getTasks, getTask } from './data';\nimport Notifier from './notifier';\n\nconst app = express();\nconst PORT = process.env.PORT || 8102;\nconst sqlite3 = require('sqlite3').verbose();\nconst db = new sqlite3.Database('eduvisors.db');\n\napp.listen(PORT, () => console.log(`Server started at http://localhost:${PORT}`));\n\n// const notifier = new Notifier();\n// const server = http.createServer(app);\n// server.listen(PORT);\n// notifier.listen(server);\n\n// console.log(`Server started at http://localhost:${PORT}`);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\n // ------------------------------------\n //         test middleware\n // ------------------------------------\n app.get('/api/test', (req, res) => {\n       db.all(\"SELECT * from profile;\",function(err,rows){\n           res.json(rows);\n       });\n });\n// ------------------------------------\n\n// addNotifier(\n//   'task',\n//   (task) => {\n//     // this can be invoked multiple times as new requests happen\n//     notifier.test((request) => {\n//       // we should skip notify if the id of the task does not match the payload\n//       if (request.path === '/api/task/:id' && request.params.id !== task.id) {\n//         return false;\n//       }\n//       return true;\n//     });\n//   }\n// );\n//\n// notifier.use('/api/task', () => getTasks());\n// notifier.use('/api/task/:id', param => (\n//   getTask(param.id).then((result) => {\n//     if (!result.task) {\n//       return Promise.reject({ statusCode: 404, message: 'Not Found' });\n//     }\n//     return Promise.resolve(result);\n//   })\n// ));\n//\n// const app = express()\n//   .use(compression())\n//   .use(cookieParser())\n//   .use(morgan('tiny'))\n//   .use(bodyParser.json());\n\n// REST API\n// app.use('/api', api);\n\n// UI\n// app.use('/', express.static(path.join(__dirname, '/../dist')));\n// app.get('/*', (req, res) => {\n//   res.sendFile(path.resolve(path.join(__dirname, '/../dist/index.html')));\n// });\n\n// const server = http.createServer(app);\n// server.listen(PORT);\n// notifier.listen(server);\n//\n// console.log(`Server started at http://localhost:${PORT}`);\n\n\n// ========================================\n\napp.use(function(req, res, next){\n\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\n// ====================================================\n//          VARIABLE DECLARATION\n// ====================================================\napp.locals.data;\n\n\n// ====================================================\n//          USER VARIABLE DECLARATION\n//          integrated into Survey, Profile and Rankings Commponents\n// ====================================================\n\napp.locals.user = {\n  id: 1,\n  email: 'bb@bb.com'\n}\n\n// ====================================================\n\nfunction schoolMatchingAlgo(data, total_score, multiplier_at, multiplier_rain, multiplier_snow, o_w, o_emp, o_tui, o_col, o_rank)\n{\n       let obj = [];\n       // console.log(15, data);\n       //console.log(16, data.name);\n\n       for (let i = 0 ; i<data.length; i++)\n             {\n                  let schoolID =  data[i].id;\n                  let institutionName = data[i].name;\n                  let province = data[i].province;\n                  let r_at = parseFloat(data[i].r_at);\n                  let r_snow = parseFloat(data[i].r_snow);\n                  let r_rain = parseFloat(data[i].r_rain);\n                  let c_weather = (r_at * multiplier_at) + (r_rain * multiplier_rain) + (r_snow * multiplier_snow);\n                  //console.log(c_weather);\n                  let score =  (c_weather * Math.pow(2, o_w)) + (data[i].c_emp * Math.pow(2, o_emp)) + (data[i].c_tui * Math.pow(2, o_tui)) + (data[i].c_col * Math.pow(2, o_col)) + (data[i].c_rank * Math.pow(2, o_rank));\n                  //console.log(1, score);\n                  //console.log(120, institutionName);\n\n\n                  let newObj = {\n                    institutionName: institutionName,\n                    province: province,\n                    actualScore: score,\n                    calculatedScore: ((Math.abs(score - total_score)).toFixed(3)),\n                    schoolID: schoolID\n                  };\n                  obj.push(newObj);\n            }   // end of FOR LOOP\n\n\n            //console.log(obj[0]);\n            obj.sort(function (a, b) {\n                  return ((parseFloat(a.calculatedScore)) - (parseFloat(b.calculatedScore)));\n            });  // end of OBJ.SORT\n\n            let obj2 = [];\n            for (let i = 0 ; i <5 ; i++)\n            {\n                // console.log(999999, obj[i]);\n                obj2.push(obj[i]);\n            }   // end of FOR LOOP\n\n            return obj2;\n            //console.log(100, obj[0]);\n\n}  // end of schoolMatchingAlgo\n\nfunction scoreCalculator(data)\n{\n  //  console.log(\"data\", data)\n  let c_at =  0;\n  let c_rain = 0;\n  let c_snow = 0;\n  let c_emp = 0;\n  let c_tui = 0;\n  let c_col = 0;\n  let c_rank = 0;\n  let o_w = 0;\n  let o_col = 0;\n  let o_tui = 0;\n  let o_rank = 0;\n  let o_emp = 0;\n  let o_at = 0;\n  let o_rain = 0;\n  let o_snow = 0;\n  let multiplier_at = 0;\n  let multiplier_rain = 0;\n  let multiplier_snow = 0;\n\n\n\n  //console.log(data);\n    c_at = parseFloat(data.c_at);\n    c_rain = parseFloat(data.c_rain);\n    c_snow = parseFloat(data.c_snow);\n    c_emp = parseFloat(data.c_emp);\n    c_tui = parseFloat(data.c_tui);\n    c_col = parseFloat(data.c_col);\n    c_rank = parseFloat(data.c_rank);\n    o_w = parseFloat(data.o_w);\n    o_col = parseFloat(data.o_col);\n    o_tui = parseFloat(data.o_tui);\n    o_rank = parseFloat(data.o_rank);\n    o_emp = parseFloat(data.o_emp);\n    o_at = parseFloat(data.o_at);\n    o_rain = parseFloat(data.o_rain);\n    o_snow = parseFloat(data.o_snow);\n\n\n\n  //console.log(o_snow);\n\n  let weather_score = (c_at * Math.pow(2, o_at)) + (c_rain * Math.pow(2, o_rain)) + (c_snow * Math.pow(2, o_snow));\n\n\n  if (o_at == 1)\n  {\n    multiplier_at = 0.5;\n  }\n  else if (o_at == 2)\n  {\n    multiplier_at = 0.3;\n  }\n  else if (o_at == 3)\n  {\n    multiplier_at = 0.2;\n  }\n\n  if (o_rain == 1)\n  {\n    multiplier_rain = 0.5;\n  }\n  else if (o_rain == 2)\n  {\n    multiplier_rain = 0.3;\n  }\n  else if (o_rain == 3)\n  {\n    multiplier_rain = 0.2;\n  }\n\n  if (o_snow == 1)\n  {\n    multiplier_snow = 0.5;\n  }\n  else if (o_snow == 2)\n  {\n    multiplier_snow = 0.3;\n  }\n  else if (o_snow == 3)\n  {\n    multiplier_snow = 0.2;\n  }\n\n  let weather_score2 = (c_at * multiplier_at) + (c_rain * multiplier_rain) + (c_snow * multiplier_snow);\n  console.log(\"equation:\" + c_at + \"*\" + multiplier_at + \"+\" +c_rain + \"*\" + multiplier_rain + c_snow + \"*\"  + multiplier_snow);\n  console.log(19000, weather_score2);\n\n  let total_score = (weather_score2 * Math.pow(2, o_w)) + (c_emp * Math.pow(2, o_emp)) + (c_tui * Math.pow(2, o_tui)) + (c_col * Math.pow(2, o_col)) + (c_rank * Math.pow(2, o_rank));\n  console.log(20000, total_score);\n\n  var arr2=[];\n  let schoolNames = [];\n\n  let test = new Promise(function(resolve, reject) {\n      db.each(\"SELECT * FROM school_rank_test\", function(err, row) {\n        arr2.push(row);\n      }, function(){\n              schoolNames = schoolMatchingAlgo(arr2, total_score, multiplier_at, multiplier_rain, multiplier_snow, o_w, o_emp, o_tui, o_col, o_rank);\n              // console.log(20199999999, schoolNames[0]);\n              resolve(schoolNames);\n      });\n      // console.log(12000, schoolNames[0]);\n});\nreturn test;\n//console.log(1400, test);\n}\n\n// ====================================================\n//             COST of LIVING Component\n// ====================================================\napp.get('/api/cost_living', (req, res) => {\n\n    db.all(\"SELECT * FROM cost_living\", function(err, rows)\n    {\n      console.log(rows);\n      res.json(rows);\n    });\n});\n\n// ====================================================\n//             FIELD of STUDY Component\n// ====================================================\napp.get('/api/field_study', (req, res) => {\n    let rows = \"\";\n\n    db.all(\"SELECT * FROM field_study\", function(err, rows)\n    {\n      res.json(rows);\n    });\n});\n\n// ====================================================\n//             PROFILE  Component\n// ====================================================\n\napp.get('/api/profile', (req, res) => {\n\n    db.all(`SELECT profile.*, level_education.full_name AS ledu, field_study.full_name AS fs FROM profile LEFT JOIN level_education ON profile.lvl_educ = level_education.short LEFT JOIN field_study ON profile.field_study = field_study.short WHERE level_education.short=profile.lvl_educ AND field_study.short=profile.field_study AND\n    profile.id=${app.locals.user.id};`, function(err, rows)\n        {\n          console.log(rows);\n          res.json(rows);\n        });\n});\n\n// ====================================================\n//             COMPLETION Component\n// ====================================================\napp.get('/api/profileCompletion', (req, res) => {\ndb.all(\"SELECT * FROM profileCompletion\", function(err, rows)\n    {\n      res.json(rows);\n    });\n});\n\n\n// ====================================================\n//             SCHOOL Component\n// ====================================================\n\napp.post('/api/schoolProf', (req, res) => {\n    var id = req.body.schoolID;\n\n    app.get('/api/signup', (req, res) => {\n          db.all(`SELECT institute_rank.* FROM institute_rank LEFT JOIN school_rank_test ON school_rank_test.name = institute_rank.institution_name WHERE school_rank_test.id='${id}';`, function(err, rows)\n          {\n            res.json(rows);\n          });\n    });  // end of SIGNUP\n\n});   // end of POST\n\n// ====================================================\n//              COST of TUITION Component\n// ====================================================\napp.get('/api/costoftuition', (req, res) => {\n\n    db.all(\"select id, province, education from cost_living\", function(err, rows)\n    {\n      res.json(rows);\n    });\n});\n\n// ====================================================\n//              REGISTER Component\n// ====================================================\n// app.post('/api/register', (req, res) => {\n//     res.json(req.body);\n// });\n\n// ====================================================\n//              RANKINGS Component\n// ====================================================\napp.get('/api/rankings', (req, res) => {\n      var arr=[];\n      var arr2=[];\n      var schoolNames=[];\n\n  db.each(`SELECT * FROM profile_advanced WHERE email = '${app.locals.user.email}'`,\n      function(err, row) {\n          arr2 = row;\n          schoolNames = scoreCalculator(arr2);\n        },\n        function(){\n          schoolNames.then(function(schoolNames){\n          // console.log(1102, schoolNames);\n          res.json(schoolNames);\n        });\n    });\n\n});\n\n// ====================================================\n//              PROVINCE Component\n// ====================================================\napp.get('/api/province/:province', (req, res) => {\n    let rows = \"\";\n\n    // PROVINCE in all CAPITAL LETTERS\n    req.params.province = req.params.province.toUpperCase();\n\n    db.all(`SELECT full_name FROM province WHERE short='${req.params.province}';`, function(err,rows)\n    {\n        //console.log(100, rows);\n        //console.log(200, err);\n          res.json(rows[0]);\n        });\n});\n\n// ====================================================\n//              SNOWFALL Component\n// ====================================================\napp.locals.conta = 0;\napp.get('/api/snowfall/:province/:type', (req, res) => {\n    let rows = \"\";\n\n    // PROVINCE in all CAPITAL LETTERS\n    req.params.province = req.params.province.toUpperCase();\n\n    // TYPE - capitalize only FIRST letter\n    req.params.type = req.params.type.toLowerCase();\n\n    // TABLE in all LOWER CASE\n    //req.params.table = req.params.table.toLowerCase();\n\n    console.log(req.params.type);\n\n    db.all(`SELECT jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec FROM weather WHERE type = '${req.params.type}' AND province='${req.params.province}';`, function(err,rows)\n    {\n          //app.locals.snowfall = rows;\n          //app.locals.province = rows.province;\n        // console.log(100, rows);\n        //console.log(200, err);\n        // app.locals.conta = app.locals.conta + 1;\n        // console.log(`data fetched > ${app.locals.conta}`)\n          res.json(rows);\n        });\n});\n\n// ====================================================\n//              STOREDATA FROM SURVEY 1 Component\n// ====================================================\napp.post('/api/storeUserDataSurvey1', (req, res) => {\n    console.log(11111, req.body.at);\n    let at = parseFloat(req.body.at);\n    let snow = parseFloat(req.body.snow);\n    let rain = parseFloat(req.body.rain);\n\n    console.log(at, snow, rain);\n\n    db.run(`UPDATE profile_advanced set c_at = ${at}, c_snow = ${snow}, c_rain = ${rain} WHERE email = '${app.locals.user.email}';`);\n\n    console.log(111112, at);\n    res.json(at);\n});\n\n// ====================================================\n//              STOREDATA FROM SURVEY 2 Component\n// ====================================================\napp.post('/api/storeUserDataSurvey2', (req, res) => {\n    let o_at = parseFloat(req.body.o_at);\n    let o_snow = parseFloat(req.body.o_snow);\n    let o_rain = parseFloat(req.body.o_rain);\n\n    console.log(o_at, o_snow, o_rain);\n    db.run(`UPDATE profile_advanced set o_at = ${o_at}, o_snow = ${o_snow}, o_rain = ${o_rain} WHERE email = '${app.locals.user.email}';`);\n\n    console.log(111112, o_at);\n    res.json(o_at);\n\n});\n\n// ====================================================\n//              STOREDATA FROM SURVEY 3 Component\n// ====================================================\napp.post('/api/storeUserDataSurvey3', (req, res) => {\n    let c_tui = parseFloat(req.body.tui);\n    let c_col = parseFloat(req.body.col);\n    let c_rank = parseFloat(req.body.rank);\n    let c_emp = parseFloat(req.body.emp);\n\n    console.log(c_tui, c_col, c_rank, c_emp);\n    db.run(`UPDATE profile_advanced set c_tui = ${c_tui}, c_col = ${c_col}, c_rank = ${c_rank}, c_emp = ${c_emp} WHERE email = '${app.locals.user.email}';`);\n    res.json(c_tui);\n\n\n});\n\n// ====================================================\n//              STOREDATA FROM SURVEY 4 Component\n// ====================================================\napp.post('/api/storeUserDataSurvey4', (req, res) => {\n    let o_w = parseFloat(req.body.o_w);\n    let o_tui = parseFloat(req.body.o_tui);\n    let o_col = parseFloat(req.body.o_col);\n    let o_rank = parseFloat(req.body.o_rank);\n    let o_emp = parseFloat(req.body.o_emp);\n\n    console.log(o_w, o_tui, o_col, o_rank, o_emp);\n    db.run(`UPDATE profile_advanced set o_w = ${o_w}, o_tui = ${o_tui}, o_col = ${o_col}, o_rank = ${o_rank}, o_emp = ${o_emp} WHERE email = '${app.locals.user.email}';`);\n    res.json(o_w);\n\n\n});\n\n// ====================================================\n//              WEATHER Component\n// ====================================================\napp.locals.weather = {\n    datasets: [{\n            label: '',\n            data: []\n      }]\n  }\n\napp.get('/api/weather/:province', (req, res) => {\n    let rows = \"\";\n    console.log(req.params);\n    // PROVINCE in all CAPITAL LETTERS\n    req.params.province = req.params.province.toUpperCase();\n\n    console.log(req.params);\n    db.all(`SELECT type AS label, jan AS Jan, feb as Feb, mar AS Mar, apr AS Apr, may AS May, jun AS Jun, jul AS Jul, aug as Aug, sep AS Sep, oct AS Oct, nov AS Nov, dec AS Dec FROM weather WHERE province='${req.params.province}' AND (type='snow' OR type = 'rain' OR type='temp_avg');`, function(err,rows)\n            {\n                console.log('WEATHER SERVER > ', rows, err);\n                for (let j=0; j<3; j++ ){\n                      for(let i in rows[j]){\n                          if (i == 'label') {\n                            app.locals.weather[j].datasets.label = i.value;\n                          }\n                          else {\n                            app.locals.weather[j].datasets.data.push(i.value);\n                          }\n                      }\n                  }\n                  console.log(app.locals.weather);\n                  res.json(rows);\n\n            });\n});\n"]}